command : objdump -D <filename.extension> | grep -A20 main.:
#objdump -program to dissasemble compiled programs
#Theory :objdump is a command-line program for displaying various information about
#about object files on Unix-like operating systems.
# -D select file
#too manny lines output we need to use grep command
# -A20 only 20 lines
# start from :  main.:
command to change syntax of the compiled programs:
   objdump -M intel -D <filename.extension> | grep -A20 main.:
#changing syntax from AT&T 'Linux dissasemblers syntax'
# % and $ AT&T syntax
#To : Intel syntax



#compiled with more information "Include extra debbugging information"
NOTE! Include more debbug information when compiling c code file
gcc -g <filename>
#----------------------------------------------------------------------------------
command : objdump -D <filename.extension> | grep -A20 main.:
#objdump -program to dissasemble compiled programs
#Theory :objdump is a command-line program for displaying various information about
#about object files on Unix-like operating systems.
# -D select file
#too manny lines output we need to use grep command
# -A20 only 20 lines
# start from :  main.:
command to change syntax of the compiled programs:
   objdump -M intel -D <filename.extension> | grep -A20 main.:
#changing syntax from AT&T 'Linux dissasemblers syntax'
# % and $ AT&T syntax
#To : Intel syntax
#-----------------------------------------------------------------------------------
command : gdb -q ./<filename.extension>
#GDB - debugger 
#are used to step trough compiled programs.
commands GDB:

break main
run
info registers
quit
disassemble main
# objdump output "Dissasemble compiled programs"
help info
ni - unknown
list 
# c program output: listcommand : gdb -q ./<filename.extension>
#GDB - debugger
#are used to step trough compiled programs.
commands GDB:
#with the help -g when compiled
list
#displays the code aswell in c
#break points
break main
#start program
run
#information about registers
info registers
info register <registername>
#exit
quit

#
disassemble main
# objdump output "Dissasemble compiled programs"
#help 
help info


ni - unknown


list
# c program output: list

#setting GDB to DIssasemble syntax to intel
gdb -q
(gdb) set dis intel
(gdb) quit
echo "set dis intel" > ~/.gdbinit
#check
cat ~/.gdbinit

set disassembly-flavor att
set disassembly-flavor intel
show disassembly-flavor



#--------------------------------------------
#                   registers
#Display Octal
x/o <memory address> 
x/o 0x55555555155
#hex
x/x <register>
#display unsigned 10 stand base
x/u <memory addres or register>
#Binary
x/t <mem addr or reg>
x/2x $rax
x/8xb $rip
#settings to display as u wish
#          DIMENSION
b - single byte      1 byte
h - half word        2 bytes
w - a word           4 bytes
g - gigant           8 bytes
x / <quantity> <format> <dimension>
#            FORMAT
o - octal
x - hexadecimal
u - decimal unsigned
b - binary
      
     x      /     x       /    w       /   $rip
  <EXAMINE>    <Format>     <Dimension>  <Register or 
                                          memory>

# Little endian byte order "Assembly info"

bc -ql php calculator

ni (next instruction)
print $rpb -4 (print) variable $1
i r $rbp (information register rbp)
x/x $1
x/2x $1
x/4x $1
x/xw $1
x/d $1
x/dw $1
i r $rip (memory address)
x/i $rip (asemb instruction)
x/10i (next 10 instructions assembly)
x/10i $rip (next instructions of $rip)
ni (next intruction + memory address) 
nexti a bit of difference
#format bytes in asci or string
c - look up for bytes in asci table
s- look for entire string of data
x/s <memory addres containg a string>

x/s 0x555555556004 display string
#-------------------------------------
0x555555556004:	"Hello world!"
#-----------------------------------------
(gdb) x/2xw 0x555555556004
0x555555556004:	0x6c6c6548	0x6f77206f
#------------------------------------------
                  example

0x555555556004:	0x6c6c6548	0x6f77206f
(gdb) x/2c 0x555555556004
0x555555556004:	72 'H'	101 'e'
(gdb) x/2b 0x555555556004
0x555555556004:	72 'H'	101 'e'
(gdb) x/6xb 0x555555556004
0x555555556004:	0x48	0x65	0x6c	0x6c	0x6f	0x20
(gdb) x/2xw 0x555555556004
0x555555556004:	0x6c6c6548	0x6f77206f
(gdb) x/6xb 0x555555556004
0x555555556004:	0x48	0x65	0x6c	0x6c	0x6f	0x20
(gdb) x/6ub 0x555555556004
0x555555556004:	72	101	108	108	111	32
(gdb) x/6cb 0x555555556004
0x555555556004:	72 'H'	101 'e'	108 'l'	108 'l'	111 'o'	32 ' '
(gdb) x/12cb 0x555555556004
0x555555556004:	72 'H'	101 'e'	108 'l'	108 'l'	111 'o'	32 ' '	119 'w'	111 'o'
0x55555555600c:	114 'r'	108 'l'	100 'd'	33 '!'
(gdb) x/s 0x555555556004
0x555555556004:	"Hello world!"


   0x000055555555515e <+21>:	lea    rdi,[rip+0xe9f]        # 0x555555556004
   0x0000555555555165 <+28>:	call   0x555555555050 <puts@plt>

(gdb) x/5i $rip
=> 0x555555555155 <main+12>:	mov    DWORD PTR [rbp-0x4],0x0
   0x55555555515c <main+19>:	jmp    0x55555555516e <main+37>
   0x55555555515e <main+21>:	lea    rdi,[rip+0xe9f]        # 0x555555556004
   0x555555555165 <main+28>:	call   0x555555555050 <puts@plt>
   0x55555555516a <main+33>:	add    DWORD PTR [rbp-0x4],0x1

#main programmmmmmmmmm for and a print 
   0x0000555555555149 <+0>:	endbr64 
   0x000055555555514d <+4>:	push   rbp
   0x000055555555514e <+5>:	mov    rbp,rsp
   0x0000555555555151 <+8>:	sub    rsp,0x10
=> 0x0000555555555155 <+12>:	mov    DWORD PTR [rbp-0x4],0x0
   0x000055555555515c <+19>:	jmp    0x55555555516e <main+37>
   0x000055555555515e <+21>:	lea    rdi,[rip+0xe9f]        # 0x555555556004
load effective address
   0x0000555555555165 <+28>:	call   0x555555555050 <puts@plt>
   0x000055555555516a <+33>:	add    DWORD PTR [rbp-0x4],0x1
increment i
   0x000055555555516e <+37>:	cmp    DWORD PTR [rbp-0x4],0x9
   0x0000555555555172 <+41>:	jle    0x55555555515e <main+21>
load effective address
   0x0000555555555174 <+43>:	mov    eax,0x0
   0x0000555555555179 <+48>:	leave  
   0x000055555555517a <+49>:	ret    

You may want to save the output of GDB commands to a file. There are several commands to control GDBâ€™s logging.

set logging on

    Enable logging. 
set logging off

    Disable logging. 
# watch var
display $rax
